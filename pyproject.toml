[tool.poetry]
name = "download-metoc-spectrum-response"
version = "0.1.0"
description = "A simple, functional script to download SRF (Spectral Response Function) files from extracted YAML data with rich CLI interface"
authors = ["Gwyn Uttmark <biosafetylevel5@gmail.com>"]
license = "MIT"
repository = "https://github.com/biosafetylvl5/download-metoc-spectrum-response"

packages = [{include="project", from="src"}]

readme = "README.md"
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Atmospheric Science",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[tool.poetry.dependencies]
python = ">=3.8,<4.0"
# Core dependencies for SRF downloader
aiohttp = "^3.8.0"
PyYAML = "^6.0"
typer = "^0.9.0"
rich = "^13.0.0"
rich-argparse = "*"

# Doc group dependencies (optional)
sphinx = { version = "^7.2.0", optional = true }
sphinxcontrib-runcmd = { version = "*", optional = true }
sphinxcontrib-napoleon = { version = "*", optional = true }
sphinx-argparse = { version = "^0.4.0", optional = true }

[tool.poetry.group.dev.dependencies]
# Development dependencies that are always installed for development
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
pytest-asyncio = "^0.21.0"  # Added for testing async functions
aioresponses = "^0.7.4"     # Added for mocking HTTP responses in tests
black = "^23.7.0"
ruff = "^0.0.287"
mypy = "^1.5.1"
pre-commit = "^3.3.3"
brassy = "*"

[tool.poetry.extras]
doc = [
    "sphinx",
    "sphinxcontrib-runcmd",
    "sphinxcontrib-napoleon",
    "sphinx-argparse",
    "pinkrst",
    "doc8",
    "brassy",
]

lint = [
    "pinkrst",
    "doc8",
    "prettier",
    "ruff",
    "mypy",
]

test = [
    "pytest",
    "pytest-cov",
    "pytest-xdist",
    "pytest-asyncio",  # for async test support
    "aioresponses",    # for HTTP mocking
]

[tool.poetry.scripts]
srf-downloader = "download_metoc_spectrum_response.download_metoc_spectrum_response:app"  # Main CLI entry point

[tool.poetry.urls]
Homepage = "https://github.com/biosafetylvl5/download-metoc-spectrum-response"
Issues = "https://github.com/biosafetylvl5/download-metoc-spectrum-response/issues"
Documentation = "https://biosafetylvl5.github.io/download-metoc-spectrum-response/"

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = "aiohttp.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "yaml.*"
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
addopts = "--cov=src --cov-report=term-missing --cov-report=xml"
asyncio_mode = "auto"  # Automatically handle async tests
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "network: marks tests that require network access",
]

[tool.coverage.run]
source = ["src"]
omit = ["tests/*", "**/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]

[tool.black]
target-version = ['py38']
line-length = 100  # Slightly longer for functional style
skip-string-normalization = true

[tool.bandit]
exclude_dirs = ["tests", "docs"]
skips = ["B101"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.1.0"
tag_format = "v$version"
